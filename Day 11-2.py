# --- Part Two ---

# As soon as people start to arrive, you realize your mistake. People don't just care about adjacent seats - they care about the first seat they can see in each of those eight directions!

# Now, instead of considering just the eight immediately adjacent seats, consider the first seat in each of those eight directions. For example, the empty seat below would see eight occupied seats:

# .......#.
# ...#.....
# .#.......
# .........
# ..#L....#
# ....#....
# .........
# #........
# ...#.....

# The leftmost empty seat below would only see one empty seat, but cannot see any of the occupied ones:

# .............
# .L.L.#.#.#.#.
# .............

# The empty seat below would see no occupied seats:

# .##.##.
# #.#.#.#
# ##...##
# ...L...
# ##...##
# #.#.#.#
# .##.##.

# Also, people seem to be more tolerant than you expected: it now takes five or more visible occupied seats for an occupied seat to become empty (rather than four or more from the previous rules). The other rules still apply: empty seats that see no occupied seats become occupied, seats matching no rule don't change, and floor never changes.

# Given the same starting layout as above, these new rules cause the seating area to shift around as follows:

# L.LL.LL.LL
# LLLLLLL.LL
# L.L.L..L..
# LLLL.LL.LL
# L.LL.LL.LL
# L.LLLLL.LL
# ..L.L.....
# LLLLLLLLLL
# L.LLLLLL.L
# L.LLLLL.LL

# #.##.##.##
# #######.##
# #.#.#..#..
# ####.##.##
# #.##.##.##
# #.#####.##
# ..#.#.....
# ##########
# #.######.#
# #.#####.##

# #.LL.LL.L#
# #LLLLLL.LL
# L.L.L..L..
# LLLL.LL.LL
# L.LL.LL.LL
# L.LLLLL.LL
# ..L.L.....
# LLLLLLLLL#
# #.LLLLLL.L
# #.LLLLL.L#

# #.L#.##.L#
# #L#####.LL
# L.#.#..#..
# ##L#.##.##
# #.##.#L.##
# #.#####.#L
# ..#.#.....
# LLL####LL#
# #.L#####.L
# #.L####.L#

# #.L#.L#.L#
# #LLLLLL.LL
# L.L.L..#..
# ##LL.LL.L#
# L.LL.LL.L#
# #.LLLLL.LL
# ..L.L.....
# LLLLLLLLL#
# #.LLLLL#.L
# #.L#LL#.L#

# #.L#.L#.L#
# #LLLLLL.LL
# L.L.L..#..
# ##L#.#L.L#
# L.L#.#L.L#
# #.L####.LL
# ..#.#.....
# LLL###LLL#
# #.LLLLL#.L
# #.L#LL#.L#

# #.L#.L#.L#
# #LLLLLL.LL
# L.L.L..#..
# ##L#.#L.L#
# L.L#.LL.L#
# #.LLLL#.LL
# ..#.L.....
# LLL###LLL#
# #.LLLLL#.L
# #.L#LL#.L#

# Again, at this point, people stop shifting around and the seating area reaches equilibrium. Once this occurs, you count 26 occupied seats.

# Given the new visibility method and the rule change for occupied seats becoming empty, once equilibrium is reached, how many seats end up occupied?

# seatsMapRaw = [
#     'L.LL.LL.LL',
#     'LLLLLLL.LL',
#     'L.L.L..L..',
#     'LLLL.LL.LL',
#     'L.LL.LL.LL',
#     'L.LLLLL.LL',
#     '..L.L.....',
#     'LLLLLLLLLL',
#     'L.LLLLLL.L',
#     'L.LLLLL.LL',
# ]

seatsMapRaw = [
'LLLLLL.LLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLL.LLLL.LLLLLLLL.LLLLLLL.LLLLLLLLLLLLL..L.LLLLLL',
'LLLLLLLLLL..LLL.LLLLLLL.LLLLLLLLLLLLLLLLLL.LLL.LL.LLLLLLLL.LLLLLLLL.L.LLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LL.LLLLLLLLLLLLLLLLLLL.L.LLLLLL.LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL',
'LLLLLLLLLLLLLLL.LLLLLLL.L.LLLLLLLLL.LLLLLL.LLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLLLLLLLL.L.LLLLLL',
'LLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLL.LLL.LLLL.LLLLLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLL.LLLLL.LLLLLLLLL.LLLLLLLLL.LL.LLL.LLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLL.LLL.LLLLLLLLLL.LLLLLLLL',
'.LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLL.LLL.LL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLLL.LLLL.L.LLLLLLLL.LLLL.LLL.LLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.L.LL.LLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL..LLLLLLLLLLLLL.LLL.LLLL',
'..LL....L.LL........L...L......LL..L.L........L....L..........L..L.........LLLL..L.L.L..LL...LL....',
'LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LL.LLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LL.LL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL..LLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLLL.LLLLL.LLLLL.LL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLL.LL.LLLLL.LLLLLLLL',
'L.L.........L..L..L.L....LLLL...LL..L....L.L..L..L.L.L.L........LL.L...........L........L..LLL...LL',
'LLLLLLLLLL.LLLLLLLLLLL.LL.LLLLLLLLL.LLLLLL.LLLL..LLLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLL.L',
'LLLLLLLLLL.LLL..LLLLLLLLLLLLLLLLLLL..LLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.L.LLLLL..L.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLL.LL.LLLLLLLLL.LLLLLL.LLLLLL.LLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLL.LLL.L.LLLLLLLL',
'LLLLLLLLLL.LLLL..LLLL.LLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL..LLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLL.L.',
'LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLL.LL.LLL.LLLLLL.LLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL',
'LLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLL.L..LLLL.LLL.LLLLLL..LLLLLLLL.LLLLL..LLLLLL.',
'LLLLLLLLLL.LLLLLLL.LLLLLLLLLL.LLLLL.LLLLLLLLLLLLL..LLLLLLL.L.LLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL..LLLLLLLL.LLLLLLLLLLLLLLLL.L.LL.LLLLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLLLLLLL..LLLLLL.L.LL.LLLLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL',
'LL...L.LL....L.LL.L.....L.LL......L.......L...........L.L..L.LL....LL..LLL.L.LL...........L...LLLL.',
'LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL..LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL',
'LLLLLLLLLLLLLLL.LL.LLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.L..LLLLLLLL.LLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLL.L.LLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL',
'LLLLLLLLLLLLLL..LLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL',
'LLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LL.LLLLLLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLLL.L',
'LLLLLLLLLLLLLL..LLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LL..LLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLL.L.LLLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'...LL.LL.L....L....LLL..LL..L.....................L....LL..L...LL..L........LL.....L...........L..L',
'LLLLLLLLLL.LLLL..LLL.LLLL.LLLLLLLLL.LLLLLL..LLLLL.LLLLLLLL.LLLLLLLLLLLLLLL...LLLLLLLLLLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLL.L.LLLLLLLLLL.L.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLL.L.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLL.LLL.LLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLL.LL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL',
'LLLLLLLLLL.LLL..LLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLL.LLLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLL.LL.LLL.LLL.LLLLLLLLLLL.LLLLLLLL.L.LLLLL.LLLLLLLL..LLLL.LLLLLLLL',
'LLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'.......LL.L.LL.....LL.L...L.L..LL..L...L..L.......LLLL....LL..LL.L...L...L...L..L.L.LL..L...L....L.',
'L.LLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLL..LL..LLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLLL.LLLLLLLL.LLLLLL.LLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLL.LLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL',
'LLLLLLLLLL.LLLL..LLLLLLLL.LLLL.LLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL..LLLLLLLLLLLLL',
'LLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLL.LLLL.L.LLLLLLLLLLLL.L.LLLLLLLL',
'L..LLL..L........L.LL......L........LL.....L.L..LL...L......L...LL......L.L.....LL..L......L...L.LL',
'LL.LLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLL..LLL..LLLLLLLL',
'LLLLLLLLLLLLLL..LLLL.LLLLLLLLLL.LLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLL.LLLL.LLLLLLLLLLLLLLLLLL',
'.L...L...L..LLLLLLL.L.L..............L.LL..L.L..LLL...L......LL.L...LL.L.L.L..L....L..LLL..LL.L....',
'LLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLL.L.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL',
'LLLLLLLLLL.LLLLLLLLL.LLLL.LL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.L.LLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLL.L.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLL.LLLL.LLL.LLLLLLLL.LLLLLLLLLLLLLLLLL.LLLL.LLLLLLLL',
'LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL..LLLLLLLLLLL..LL.LLLLLLL..LLLLLLL.LLLLLL.L.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LL.L.LLLLLLLLLLL.LLLLLLL.LLLLLL.LL.LLL.LLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLL.LL.LLLLLLLL',
'LLLLLLLLLL.LLLLLLLLL.LLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL..LLLLLLL.LLLLLLL.LLLLLLLLLLLL.L.L.LLLLLL',
'LLLLLLLLLL.LLLLLLLLLLLLLL..LLLLLLLLLLLL.LL.LLLLLL.LLLLLLLL.LLLLLLLL.LL..LLL.LLLLLLLL.LLLLLLLLLLLLL.',
'....L.L..L......L.LL..L.L.LLL.L...L....LL.L..LL....LL.LL...LLL........L.LL..L...L..LL.LL..L...L...L',
'LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLL.L',
'L.LLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLL.L.LLLLLLLLLLLLLLLLLLLLLLLL.LL.LLLL.LL.LLL.L.LLLLLLL.LLLLLL',
'LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLL.L.LLLLLLLLL.LLLLLLLLLL.LLLLLL.L',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLL.LLLLLL.LLLLLLLLLLLL.LL.LL.LLLLL.LLLLLLL..LLLLLLLLLLLLL.LLLLLLLL',
'LLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL',
'LLL.L.L.L..L...L...LL.L........LL..L..L.....L..L.LLL..L.L.L.L.LL..LLLL.L............L..........L...',
'LLLLLL.LLL.LLLL.L.LLLLLLLLLLLLLLLLL..LLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.L..LLLL.L.LLLLLL',
'LLLLLLLLLL.L.LLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLL.L..LLLLL.LLLLLLLLLLLLLLLL.LLLLL.LLLLLL.L',
'LLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.',
'LLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLL..LLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLL.L',
'L.LLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLL.LL.LLL.LLLLLL.LLLLLLLL.LLLLLLLL.LLL.LLL.LLLLLLLL.LLLLLL.LLLLLLL',
'LLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLL.LLLL.LLL.LLL.LLLL.LLLLLL..LLLLLLLLLLLLLL.LLLLLLLL',
'.....L..LLLL..LL....LLLL.LL..L..L...L.L...LL.L...L.........L.L..........L...L....L.L.LL.LL..LL.LL.L',
'LLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLL.LL.LLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLL.LLL',
'LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLL.L.LLLLLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL',
'LLLLLLLLLL.LLLL.LLL.LL.LLLLLLLLLLLLLLL.LLL..LLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL',
'.L.LL........L...LL.LLL...............LL....L...L....LL.LLL...............L....L...L...L....L...L..',
'LLLLLLLLLLLLLLL.LLL.LLLLL.L.LLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLL.LLLLLLLLLLLLL..LLLLLLLL',
'LLLLLLL.L..LLLL.LLLLLLLLL..LLLLL.LL.LLLLLL.LLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLL.L.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL.LLLLLLLL.LLLLL.LL.LLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLL..LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLL..LL.L.L..LL.LL....LL..LL.LLL...L..LL...L..L....L......L.L..LLL.L....LLLL.LL....LL.LL.....L.L',
'LLLLLL.LLLLLLLL.LLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLL',
'LLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LL.LLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLL.LLLLLLLLLLLLL.LLL.LLLLLL..LLLLLLLL.LLLLL.LLLLLLLL',
'LLLLLLLLLL.LLLL.LLL.LLLLL.LLLLLLLLL.LLLLLL.LLLLLL.LLLLLLLL.LL.LLLLL.LLLLLLLLLL.LLLLLLLLL.L.LLLLLLLL',
'.LLLLL.LLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL',
]

import copy

seatsMapIteration0 = []
for y, r in enumerate(seatsMapRaw):
    _ = []
    for x, c in enumerate(r): _.append(c)
    seatsMapIteration0.append(_)

def isOccupied(seat):
    if seat is None: return False
    if seat =='.': return False
    if seat == '#': return True
    return False

def checkAdjacentOccupacy(x,y, seatsMap):
    neighbors = [ '~' for x in range(0,8) ]

    iteration = 0
    while '~' in neighbors:
        i = 0
        for deltay in [-1-iteration,0,1+iteration]:
            for deltax in [-1-iteration,0,1+iteration]:
                if deltay == 0 and deltax == 0: continue
                if neighbors[i] != '~': 
                    i+=1
                    continue
                
                xindex_ = x + deltax
                yindex_ = y + deltay

                if xindex_>= 0 and yindex_>= 0:
                    try:
                        focus_ = seatsMap[yindex_][xindex_]
                        if focus_ == '.': focus_ = '~'
                    except:
                        focus_ = None
                else:
                    focus_ = None

                neighbors[i] = focus_
                i+=1

        iteration += 1

    result = 0
    for s in neighbors:
        if s is not None: result+=isOccupied(s)
    return result

def prettyPrint( printMap ):
    for r in printMap: print(r)

def iterate( prevStateMap ):
    newStateMap = copy.deepcopy( prevStateMap )

    for y in range(0, len(prevStateMap)):
        for x in range(0, len(prevStateMap[0])):        
            checkedSeat_ = prevStateMap[y][x]
            if checkedSeat_!='.':
                if checkAdjacentOccupacy(x,y, prevStateMap) == 0 and not isOccupied(checkedSeat_):
                    newSeatValue_ = '#'
                elif checkAdjacentOccupacy(x,y, prevStateMap) >= 5 and isOccupied(checkedSeat_):
                    newSeatValue_ = 'L'
                else:
                    newSeatValue_ = prevStateMap[y][x]

                newStateMap[y][x] = newSeatValue_

    return newStateMap

def areMapsIdentical(mapA, mapB):
    for y in range(0, len(mapA)):
        for x in range(0, len(mapA[0])):
            if mapA[y][x] != mapB[y][x]: return False
    return True

def totalOccupancy(checkMap):
    result = 0
    for y in range(0, len(checkMap)):
        for x in range(0, len(checkMap[0])):
           if isOccupied( checkMap[y][x] ): result+=1
    return result

testIfChanged = False
focusIteration = seatsMapIteration0

i = 0
while not testIfChanged:
    newIterationMap = iterate( focusIteration )

    testIfChanged = areMapsIdentical(focusIteration, newIterationMap)

    focusIteration = newIterationMap

    i+=1

print('Occupancy stopped at',totalOccupancy(focusIteration))
print('No change after',str(i-1),'th')